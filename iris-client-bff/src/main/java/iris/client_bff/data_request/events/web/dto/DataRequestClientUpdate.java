/*
 * IRIS-Gateway API
 * ### Encryption of the data to be transmitted (contact data) In order to be not limited in the amount of data, a hybrid encryption with symmetric encryption of the data and asymmetric encryption of the symmetric key is used for the encryption of the contact data.    1. The apps and applications get the public key of the health department as a 4096-bit RSA key from the IRIS+ server. This key is base64-encoded similar to the Private Enhanced Mail (PEM) format but without key markers (-----BEGIN PUBLIC KEY----- / -----END PUBLIC KEY-----).   2. The app generates a 256-bit AES key.   3. The data is encrypted with this key (algorithm: AES/CBC/PKCS5Padding and 16 byte IV)   4. IV bytes are prepended to the cipher text. Those merged bytes represent the encrypted content.   5. The AES key must be encrypted with the public RSA key of the health department. (algorithm: RSA with Optimal Asymmetric Encryption Padding (OAEP) \"RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING\")   6. The encrypted AES key and the encrypted content must be transmitted base64 encoded.    #### Schematic sequence    ```   pubKeyEncryption = publicKeyFromBase64(givenPublicKey);   contentKey = generateAESKey();   iv = generateRandomBytes(16);    encrypted = contentKey.encrypt(content, \"AES/CBC/PKCS5Padding\", iv);   keyEncrypted = pubKeyEncryption.encrypt(contentKey, \"RSA/NONE/OAEPWithSHA3-256AndMGF1Padding\");    submissionDto.encryptedData = base64Encode(concat(iv,encrypted));   submissionDto.secret = base64Encode(keyEncrypted);   ``` 
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: jens.kutzsche@gebea.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package iris.client_bff.data_request.events.web.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;

/**
 * The data request that will be updated by the FE.
 */
@ApiModel(description = "The data request that will be updated by the FE.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen",
		date = "2021-04-30T17:29:53.869627+02:00[Europe/Berlin]")
public class DataRequestClientUpdate {
	public static final String SERIALIZED_NAME_NAME = "name";
	@SerializedName(SERIALIZED_NAME_NAME)
	private String name;

	public static final String SERIALIZED_NAME_EXTERNAL_REQUEST_ID = "externalRequestId";
	@SerializedName(SERIALIZED_NAME_EXTERNAL_REQUEST_ID)
	private String externalRequestId;

	public static final String SERIALIZED_NAME_COMMENT = "comment";
	@SerializedName(SERIALIZED_NAME_COMMENT)
	private String comment;

	public static final String SERIALIZED_NAME_STATUS = "status";
	@SerializedName(SERIALIZED_NAME_STATUS)
	private DataRequestStatusUpdateByUser status;

	public DataRequestClientUpdate name(String name) {

		this.name = name;
		return this;
	}

	/**
	 * Friendly name of the request to be identified easily by GA
	 * 
	 * @return name
	 **/
	@javax.annotation.Nullable
	@ApiModelProperty(value = "Friendly name of the request to be identified easily by GA")

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public DataRequestClientUpdate externalRequestId(String externalRequestId) {

		this.externalRequestId = externalRequestId;
		return this;
	}

	/**
	 * External ID outside of IRIS
	 * 
	 * @return externalRequestId
	 **/
	@javax.annotation.Nullable
	@ApiModelProperty(value = "External ID outside of IRIS")

	public String getExternalRequestId() {
		return externalRequestId;
	}

	public void setExternalRequestId(String externalRequestId) {
		this.externalRequestId = externalRequestId;
	}

	public DataRequestClientUpdate comment(String comment) {

		this.comment = comment;
		return this;
	}

	/**
	 * Comment from an IRIS user.
	 * 
	 * @return comment
	 **/
	@javax.annotation.Nullable
	@ApiModelProperty(value = "Comment from an IRIS user.")

	public String getComment() {
		return comment;
	}

	public void setComment(String comment) {
		this.comment = comment;
	}

	public DataRequestClientUpdate status(DataRequestStatusUpdateByUser status) {

		this.status = status;
		return this;
	}

	/**
	 * Get status
	 * 
	 * @return status
	 **/
	@javax.annotation.Nullable
	@ApiModelProperty(value = "")

	public DataRequestStatusUpdateByUser getStatus() {
		return status;
	}

	public void setStatus(DataRequestStatusUpdateByUser status) {
		this.status = status;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		DataRequestClientUpdate dataRequestClientUpdate = (DataRequestClientUpdate) o;
		return Objects.equals(this.name, dataRequestClientUpdate.name) &&
				Objects.equals(this.externalRequestId, dataRequestClientUpdate.externalRequestId) &&
				Objects.equals(this.comment, dataRequestClientUpdate.comment) &&
				Objects.equals(this.status, dataRequestClientUpdate.status);
	}

	@Override
	public int hashCode() {
		return Objects.hash(name, externalRequestId, comment, status);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class DataRequestClientUpdate {\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    externalRequestId: ").append(toIndentedString(externalRequestId)).append("\n");
		sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
		sb.append("    status: ").append(toIndentedString(status)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
